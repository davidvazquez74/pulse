name: Update News (hourly)

on:
  schedule:
    - cron: "0 * * * *"        # cada hora
  workflow_dispatch:            # ejecución manual

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Node & npm
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Show env
        run: |
          echo "PWD=$PWD"
          node -v
          npm -v
          ls -la

      - name: Ensure folders + seed
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p scripts data
          if [ ! -f data/latest.json ]; then
            cat > data/latest.json <<'JSON'
            {"updated_at":"1970-01-01T00:00:00Z","version":"seed","cataluna":[],"espana":[],"rioja":[],"global":[]}
JSON
          fi
          ls -la data

      - name: Install deps (no package.json)
        run: npm i --no-save node-fetch@3 fast-xml-parser@4

      - name: Write build script (scripts/build_latest.mjs)
        shell: bash
        run: |
          set -euo pipefail
          cat > scripts/build_latest.mjs <<'EOF'
          #!/usr/bin/env node
          import fs from 'node:fs';
          import path from 'node:path';
          import fetch from 'node-fetch';
          import { XMLParser } from 'fast-xml-parser';
          import { fileURLToPath } from 'node:url';
          const __filename = fileURLToPath(import.meta.url);
          const __dirname  = path.dirname(__filename);

          const FEEDS = {
            cataluna: [
              "https://www.lavanguardia.com/mvc/feed/rss/catalunya",
              "https://www.elperiodico.com/es/rss/catalunya/rss.xml"
            ],
            espana: [
              "https://feeds.elpais.com/mrss-s/pages/ep/site/elpais.com/portada",
              "https://www.rtve.es/rss/",
              "https://e00-elmundo.uecdn.es/elmundo/rss/espana.xml"
            ],
            rioja: ["https://www.larioja.com/rss/2.0/portada"],
            global: [
              "https://feeds.bbci.co.uk/news/world/rss.xml",
              "https://rss.nytimes.com/services/xml/rss/nyt/World.xml"
            ]
          };

          const MAX = 3, parser = new XMLParser({ ignoreAttributes:false, attributeNamePrefix:"" });
          const strip = h => String(h||"").replace(/<[^>]+>/g,"").replace(/\s+/g," ").trim();
          const norm  = t => String(t||"").toLowerCase().replace(/[^\p{L}\p{N}\s]/gu," ").replace(/\s+/g," ").trim();

          function parse(xml, source){
            const obj = parser.parse(xml);
            const ch  = obj.rss?.channel || obj.feed;
            let its = ch?.item ? (Array.isArray(ch.item)? ch.item : [ch.item]) :
                      ch?.entry? (Array.isArray(ch.entry)? ch.entry: [ch.entry]) : [];
            return its.map(it=>{
              const title = it.title?.["#text"] || it.title || "(sin título)";
              const link  = it.link?.href || (typeof it.link==="string"? it.link : (Array.isArray(it.link)? it.link[0] : "")) || "";
              const pub   = it.pubDate || it.published || it.updated || new Date().toISOString();
              const img   = it.enclosure?.url || "";
              return { title:String(title).trim(), url:String(link).trim(), source, published_at:new Date(pub).toISOString(), summary:strip(it.description||it.summary||""), img };
            });
          }

          async function fetchFeed(u){
            const r = await fetch(u, { headers:{'User-Agent':'PulseBot/1.0'} });
            const txt = await r.text();
            return parse(txt, new URL(u).hostname);
          }

          function byIntersection(list){
            const m=new Map();
            for(const it of list){
              const k=norm(it.title).slice(0,80);
              if(!m.has(k)) m.set(k,{it,count:0,latest:it.published_at});
              const e=m.get(k);
              e.count++;
              if(new Date(it.published_at)>new Date(e.latest)) e.latest=it.published_at;
            }
            return [...m.values()]
              .sort((a,b)=> (b.count-a.count) || (new Date(b.latest)-new Date(a.latest)))
              .map(e=>e.it);
          }

          async function main(){
            const out = { updated_at:new Date().toISOString(), version:"live", cataluna:[], espana:[], rioja:[], global:[] };

            for (const [cat, urls] of Object.entries(FEEDS)){
              let all=[];
              for (const u of urls){
                try{ all.push(...await fetchFeed(u)); } catch(e){ console.error("Feed error:", u, e.message); }
              }

              const top = byIntersection(all);
              const used=new Set(), keyOf=x=>norm(x.title).slice(0,80), final=[];

              for(const it of top){ const k=keyOf(it); if(!used.has(k)){ used.add(k); final.push(it);} if(final.length>=MAX) break; }
              if(final.length<MAX){
                for(const it of all.sort((a,b)=>new Date(b.published_at)-new Date(a.published_at))){
                  const k=keyOf(it); if(!used.has(k)){ used.add(k); final.push(it);} if(final.length>=MAX) break;
                }
              }

              out[cat] = final.map(it=>({
                title: it.title, summary: it.summary, url: it.url, source: it.source,
                published_at: it.published_at, img: it.img || "",
                location: cat==="global" ? "global" : (cat==="espana" ? "ES" : (cat==="cataluna" ? "Cataluña" : "La Rioja")),
                category: "otros"
              }));
            }

            const dir = path.join(__dirname, "../data");
            fs.mkdirSync(dir, { recursive: true });
            fs.writeFileSync(path.join(dir, "latest.json"), JSON.stringify(out, null, 2));
            console.log("Wrote data/latest.json");
          }

          main().catch(e=>{ console.error(e); process.exit(1); });
EOF
          ls -la scripts

      - name: Build latest.json
        run: node scripts/build_latest.mjs

      - name: Commit changes (if any)
        shell: bash
        run: |
          set -e
          CHANGES=$(git status --porcelain data/latest.json || true)
          echo "Changes status: $CHANGES"
          if [[ -n "$CHANGES" ]]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add data/latest.json
            git commit -m "chore: update latest.json [skip ci]" || true
            git push || true
          else
            echo "No changes"
          fi
