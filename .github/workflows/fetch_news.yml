name: Update News (hourly)

on:
  schedule:
    - cron: "0 * * * *"   # cada hora
  workflow_dispatch:       # permite lanzarlo manualmente

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install deps (no package.json needed)
        run: npm i --no-save node-fetch@3 fast-xml-parser@4

      - name: Ensure folders + seed (avoid 404 on first run)
        run: |
          mkdir -p scripts data
          if [ ! -f data/latest.json ]; then
            cat > data/latest.json <<'JSON'
            {
              "updated_at": "1970-01-01T00:00:00Z",
              "version": "seed",
              "cataluna": [],
              "espana": [],
              "rioja": [],
              "global": []
            }
JSON
          fi

      - name: Write build script (build_latest.mjs)
        run: |
          cat > scripts/build_latest.mjs <<'EOF'
          #!/usr/bin/env node
          import fs from 'node:fs';
          import path from 'node:path';
          import fetch from 'node-fetch';
          import { XMLParser } from 'fast-xml-parser';
          import { fileURLToPath } from 'node:url';

          const __filename = fileURLToPath(import.meta.url);
          const __dirname  = path.dirname(__filename);

          const FEEDS = {
            cataluna: [
              "https://www.lavanguardia.com/mvc/feed/rss/catalunya",
              "https://www.elperiodico.com/es/rss/catalunya/rss.xml"
            ],
            espana: [
              "https://feeds.elpais.com/mrss-s/pages/ep/site/elpais.com/portada",
              "https://www.rtve.es/rss/",
              "https://e00-elmundo.uecdn.es/elmundo/rss/espana.xml"
            ],
            rioja: [
              "https://www.larioja.com/rss/2.0/portada"
            ],
            global: [
              "https://feeds.bbci.co.uk/news/world/rss.xml",
              "https://rss.nytimes.com/services/xml/rss/nyt/World.xml"
            ]
          };

          const MAX_PER_SECTION = 3;
          const parser = new XMLParser({ ignoreAttributes: false, attributeNamePrefix: "" });

          function stripTags(html = "") {
            return String(html).replace(/<[^>]+>/g, "").replace(/\s+/g, " ").trim();
          }
          function normTitle(t) {
            return String(t || "").toLowerCase().replace(/[^\p{L}\p{N}\s]/gu, " ").replace(/\s+/g, " ").trim();
          }
          function parseRss(xml, source) {
            const obj = parser.parse(xml);
            const channel = obj.rss?.channel || obj.feed;
            let items = [];
            if (channel?.item) items = Array.isArray(channel.item) ? channel.item : [channel.item];
            else if (channel?.entry) items = Array.isArray(channel.entry) ? channel.entry : [channel.entry];

            return items.map(it => {
              const title   = it.title?.["#text"] || it.title || "(sin título)";
              const link    = it.link?.href || (typeof it.link === "string" ? it.link : (Array.isArray(it.link) ? it.link[0] : "")) || "";
              const pub     = it.pubDate || it.published || it.updated || new Date().toISOString();
              const summary = it.description || it.summary || "";
              const img     = (it.enclosure?.url) || "";
              return {
                title: String(title).trim(),
                url: String(link).trim(),
                source,
                published_at: new Date(pub).toISOString(),
                summary: stripTags(summary),
                img
              };
            });
          }
          async function fetchFeed(url) {
            const res = await fetch(url, { headers: { "User-Agent": "PulseBot/1.0" } });
            const text = await res.text();
            return parseRss(text, new URL(url).hostname);
          }
          function pickTopByIntersection(group) {
            const map = new Map();
            for (const item of group) {
              const key = normTitle(item.title).slice(0, 80);
              if (!map.has(key)) map.set(key, { item, count: 0, sources: new Set(), latest: item.published_at });
              const entry = map.get(key);
              entry.count += 1;
              entry.sources.add(item.source);
              if (new Date(item.published_at) > new Date(entry.latest)) entry.latest = item.published_at;
            }
            const arr = Array.from(map.values()).sort(
              (a, b) => (b.count - a.count) || (new Date(b.latest) - new Date(a.latest))
            );
            return arr.map(e => e.item);
          }
          async function collect() {
            const result = { updated_at: new Date().toISOString(), version: "live", cataluna: [], espana: [], rioja: [], global: [] };

            for (const [cat, urls] of Object.entries(FEEDS)) {
              let all = [];
              for (const u of urls) {
                try { const list = await fetchFeed(u); all.push(...list); }
                catch (e) { console.error("Feed error:", u, e.message); }
              }
              const top = pickTopByIntersection(all);
              const used = new Set();
              const keyOf = x => normTitle(x.title).slice(0, 80);
              const final = [];

              for (const it of top) {
                const k = keyOf(it);
                if (!used.has(k)) { used.add(k); final.push(it); }
                if (final.length >= MAX_PER_SECTION) break;
              }
              if (final.length < MAX_PER_SECTION) {
                const rest = all.sort((a,b)=> new Date(b.published_at) - new Date(a.published_at));
                for (const it of rest) {
                  const k = keyOf(it);
                  if (!used.has(k)) { used.add(k); final.push(it); }
                  if (final.length >= MAX_PER_SECTION) break;
                }
              }

              result[cat] = final.map(it => ({
                title: it.title,
                summary: it.summary,
                url: it.url,
                source: it.source,
                published_at: it.published_at,
                img: it.img || "",
                location: cat === "global" ? "global" : (cat === "espana" ? "ES" : (cat === "cataluna" ? "Cataluña" : "La Rioja")),
                category: "otros"
              }));
            }
            return result;
          }
          async function main() {
            const out = await collect();
            const dir = path.join(__dirname, "../data");
            fs.mkdirSync(dir, { recursive: true });
            const file = path.join(dir, "latest.json");
            fs.writeFileSync(file, JSON.stringify(out, null, 2));
            console.log("Wrote", file);
          }
          main().catch(e => { console.error(e); process.exit(1); });
EOF

      - name: Build latest.json
        run: node scripts/build_latest.mjs

      - name: Commit changes (if any)
        run: |
          if [[ -n "$(git status --porcelain data/latest.json)" ]]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add data/latest.json
            git commit -m "chore: update latest.json [skip ci]"
            git push
          else
            echo "No changes"
          fi
